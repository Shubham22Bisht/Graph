class Solution {
public:
    void dfs(int r,int c,vector<vector<int>>&visited,int prevHeight,vector<vector<int>>& heights){
        int m=heights.size();
        int n=heights[0].size();
        if(r<0 || c<0 || r>=m || c>=n || visited[r][c]==1 || heights[r][c]<prevHeight)return ;
        visited[r][c]=1;
        dfs(r+1,c,visited,heights[r][c],heights);
        dfs(r-1,c,visited,heights[r][c],heights);
        dfs(r,c-1,visited,heights[r][c],heights);
        dfs(r,c+1,visited,heights[r][c],heights);

    }
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        int m=heights.size();
        int n=heights[0].size();
        vector<vector<int>>pac(m,vector<int>(n,0));
        vector<vector<int>>atl(m,vector<int>(n,0));
        vector<vector<int>>v;
        for(int i=0;i<n;i++){
            dfs(0,i,pac,heights[0][i],heights);
            dfs(m-1,i,atl,heights[m-1][i],heights);
        }
        for(int i=0;i<m;i++){
            dfs(i,0,pac,heights[i][0],heights);
            dfs(i,n-1,atl,heights[i][n-1],heights);
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(pac[i][j]==1 && atl[i][j]==1)v.push_back({i,j});
            }
        }
        return v;
       
    }
};
