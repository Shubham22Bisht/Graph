class Solution {
public:
    struct word{
        string s;
        int ti;
    };
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        int n=wordList.size();
        queue<word>q;
        unordered_map<string,bool>visited;
        q.push({beginWord,1});
        visited[beginWord]=true;
        for(int i=0;i<n;i++){
            visited[wordList[i]]=false;
        }
        while(!q.empty())
        {
            word f=q.front();
            q.pop();

            if(f.s==endWord)return f.ti;

             for(int j=0;j<beginWord.length();j++){
                  for(int i=0;i<26;i++){
                      string temp=f.s;
                       temp[j]='a'+i;
                       if(visited.find(temp)!=visited.end() && !visited[temp]){
                           q.push({temp,f.ti+1});
                           visited[temp]=true;
                       }
                    }
                  }
             }
            
        return 0;
        }
};
