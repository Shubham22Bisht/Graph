class Solution {
public:
        int n;
        //  2->converting the square no into required row , column
        pair<int,int>squareToCoordinates(int square){
             int r,c;
             r=(square-1)/n;
             c=(square-1)%n;
             if(r%2)c=n-1-c;
            return {r,c};
        }
    int snakesAndLadders(vector<vector<int>>& board) {
        // T:O(n2) S:o(n2)
    //   3 phases of the algorithim
         n=board.size();
    //   1->reversing the board for ease of calculation 
         reverse(board.begin(),board.end());
            //    3->implementing bfs to find the minimum moves
            queue<pair<int,int>>q;
            vector<int>visited(n*n,0);
            visited[1]=1;
            q.push({1,0});   // first value denotes the square no and second value denotes the moves

            while(!q.empty()){
                pair<int,int>p=q.front();
                q.pop();
                int square=p.first,moves=p.second;
                for(int i=1;i<7;i++){
                    int nextSquare=square+i;
                    pair<int,int>coordinates=squareToCoordinates(nextSquare);
                    int r=coordinates.first;
                    int c=coordinates.second;
                    if(board[r][c]!=-1)nextSquare=board[r][c];
                    if(nextSquare==n*n)return moves+1;
                    if(visited[nextSquare]==0){
                        visited[nextSquare]=1;
                        q.push({nextSquare,moves+1});
                    }
                }
            }
            return -1;
            
    }
};
