class Solution {
public:
    int m,n;
    int dx[4]={0,-1,+1,0};
    int dy[4]={-1,0,0,+1};
    struct cell{
        int x;
        int y;
        int dis;
    };
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        // start bfs from the zeros and visit all the cells and conclude their  distance from the zeros , the resulting distance will be the minimum distance 
        // of any node from the nearest zero
        m=mat.size(),n=mat[0].size();
        vector<vector<int>>visited(m,vector<int>(n,0));
        vector<vector<int>>res(m,vector<int>(n,0));
        queue<cell>q;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(mat[i][j]==0){
                    q.push({i,j,0});
                    visited[i][j]=1;
                }
            }
        }
        int dx[4]={0,-1,+1,0};
        int dy[4]={-1,0,0,+1};
        while(!q.empty()){
            cell f=q.front();
            q.pop();
            res[f.x][f.y]=f.dis;
            for(int i=0;i<4;i++){
                int nr=f.x+dx[i];
                int nc=f.y+dy[i];
                if(nr>=0 && nc>=0 && nr<m && nc<n && !visited[nr][nc]){
                    visited[nr][nc]=1;
                    q.push({nr,nc,1+f.dis});

                }
            }
        }

        return res;
    }
};
