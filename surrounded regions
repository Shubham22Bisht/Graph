class Solution {
public:
    void dfs(int i,int j,vector<vector<char>>& board){

        int r=board.size();
        int c=board[0].size();
        if(i<0 || i>=r || j<0 || j>=c || board[i][j]!='O')return;
        board[i][j]='T';
        dfs(i+1,j,board);
        dfs(i-1,j,board);
        dfs(i,j+1,board);
        dfs(i,j-1,board);
        
    }
    void solve(vector<vector<char>>& board) {
        // instead of thinking the capturing of surrounded regions we go reverse thinking of capturing all those o that 
        // are not surrounded 

        // 1->capturing all those cells that are unsurrounded (run dfs from the borders of the matrix if the region is o)
        // and convert all the o into t
        // 2->iterating through the matrix and converting all the o(which are surrounded ) into x
        // 3->converting all the t into x
        // time complexity:o(m*n)
         int r=board.size();
         int c=board[0].size();
        //  first phase of the algorithim
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(board[i][j]=='O' && (i==0 || i==r-1 || j==0 || j==c-1)){
                    dfs(i,j,board);
                }
            }
        }
        //   2 and 3 phase are below
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(board[i][j]=='O')board[i][j]='X';
                if(board[i][j]=='T')board[i][j]='O';
            }
        }

    }
};
